# -*- coding: utf-8 -*-
"""model02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eEbg4sXQZh0AAgxcpTT-VCBQHhqQm00S
"""

!pip install -U torch==1.13.0 torchtext==0.6.0

# Reload environment
exit()

import torch
import torchtext
import torch.nn as nn
import numpy as np
import random
import torch.optim as optim
from torchtext.data.metrics import bleu_score
from torchtext.data import Field, TabularDataset, BucketIterator
from torch.utils.tensorboard import SummaryWriter  # to print to tensorboard
#from utils import translate_sentence, bleu, save_checkpoint, load_checkpoint

tokenizer = lambda x: x.split(' ')

# Define the fields for input (Noakhali) and target (Standard Bangla) columns
input_field = Field(sequential=True, use_vocab=True, tokenize=tokenizer, init_token="<sos>", eos_token="<eos>")
target_field = Field(sequential=True, use_vocab=True, tokenize=tokenizer, init_token="<sos>", eos_token="<eos>")

# Define the fields mapping in a dictionary
fields = {'Noakhali Language': ('input', input_field), 'Standard Bangla Language': ('target', target_field)}

# Path to your CSV file
csv_file_path = '/content/sample_data/dataset.csv'

# Load the dataset using TorchText's TabularDataset
dataset = TabularDataset(csv_file_path, 'csv', fields=fields)

# Split the dataset into train, validation, and test sets
train_data, valid_data, test_data = dataset.split(split_ratio=[0.7, 0.2, 0.1], stratified=False)

# Build the vocabulary for the input and target fields using the train data
input_field.build_vocab(train_data)
target_field.build_vocab(train_data)

# Access the input and target vocabularies
input_vocab = input_field.vocab
target_vocab = target_field.vocab

# Define the batch size and create the iterators for train, validation, and test sets
batch_size = 32
train_iterator, valid_iterator, test_iterator = BucketIterator.splits(
    (train_data, valid_data, test_data),
    batch_size=batch_size,
    sort_key=lambda x: len(x.input),
    shuffle=True
)

# Iterate over the train batches
for batch in train_iterator:
    # Access the input and target sequences for the train set
    input_sequences = batch.input
    target_sequences = batch.target
    # ...
    # Rest of your training code

# Iterate over the validation batches
for batch in valid_iterator:
    # Access the input and target sequences for the validation set
    input_sequences = batch.input
    target_sequences = batch.target
    # ...
    # Rest of your validation code

# Iterate over the test batches
for batch in test_iterator:
    # Access the input and target sequences for the test set
    input_sequences = batch.input
    target_sequences = batch.target
    # ...
    # Rest of your testing code

# Print the size of the input and target vocabularies
print("Input Vocabulary size:", len(input_vocab))
print("Target Vocabulary size:", len(target_vocab))

class Encoder(nn.Module):
    def __init__(self, input_size, embedding_size, hidden_size, num_layers, p):
        super(Encoder, self).__init__()
        self.dropout = nn.Dropout(p)
        self.hidden_size = hidden_size
        self.num_layers = num_layers

        self.embedding = nn.Embedding(input_size, embedding_size)
        self.rnn = nn.LSTM(embedding_size, hidden_size, num_layers, dropout=p)

    def forward(self, x):
        # x shape: (seq_length, N) where N is batch size

        embedding = self.dropout(self.embedding(x))
        # embedding shape: (seq_length, N, embedding_size)

        outputs, (hidden, cell) = self.rnn(embedding)
        # outputs shape: (seq_length, N, hidden_size)

        return hidden, cell

class Decoder(nn.Module):
    def __init__(
        self, input_size, embedding_size, hidden_size, output_size, num_layers, p
    ):
        super(Decoder, self).__init__()
        self.dropout = nn.Dropout(p)
        self.hidden_size = hidden_size
        self.num_layers = num_layers

        self.embedding = nn.Embedding(input_size, embedding_size)
        self.rnn = nn.LSTM(embedding_size, hidden_size, num_layers, dropout=p)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x, hidden, cell):
        # x shape: (N) where N is for batch size, we want it to be (1, N), seq_length
        # is 1 here because we are sending in a single word and not a sentence
        x = x.unsqueeze(0)

        embedding = self.dropout(self.embedding(x))
        # embedding shape: (1, N, embedding_size)

        outputs, (hidden, cell) = self.rnn(embedding, (hidden, cell))
        # outputs shape: (1, N, hidden_size)

        predictions = self.fc(outputs)

        # predictions shape: (1, N, length_target_vocabulary) to send it to
        # loss function we want it to be (N, length_target_vocabulary) so we're
        # just gonna remove the first dim
        predictions = predictions.squeeze(0)

        return predictions, hidden, cell

class Seq2Seq(nn.Module):
    def __init__(self, encoder, decoder):
        super(Seq2Seq, self).__init__()
        self.encoder = encoder
        self.decoder = decoder

    def forward(self, source, target, teacher_force_ratio=0.5):
        batch_size = source.shape[1]
        target_len = target.shape[0]
        target_vocab_size = len(target_field.vocab)

        outputs = torch.zeros(target_len, batch_size, target_vocab_size).to(device)

        hidden, cell = self.encoder(source)

        # Grab the first input to the Decoder which will be <SOS> token
        x = target[0]

        for t in range(1, target_len):
            # Use previous hidden, cell as context from encoder at start
            output, hidden, cell = self.decoder(x, hidden, cell)

            # Store next output prediction
            outputs[t] = output

            # Get the best word the Decoder predicted (index in the vocabulary)
            best_guess = output.argmax(1)

            # With probability of teacher_force_ratio we take the actual next word
            # otherwise we take the word that the Decoder predicted it to be.
            # Teacher Forcing is used so that the model gets used to seeing
            # similar inputs at training and testing time, if teacher forcing is 1
            # then inputs at test time might be completely different than what the
            # network is used to. This was a long comment.
            x = target[t] if random.random() < teacher_force_ratio else best_guess

        return outputs

# Training hyperparameters
num_epochs = 10
learning_rate = 0.001
batch_size = 64

# Model hyperparameters
load_model = False
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
input_size_encoder = len(input_field.vocab)
input_size_decoder = len(target_field.vocab)
output_size = len(target_field.vocab)
encoder_embedding_size = 300
decoder_embedding_size = 300
hidden_size = 1024  # Needs to be the same for both RNN's
num_layers = 2
enc_dropout = 0.5
dec_dropout = 0.5

encoder_net = Encoder(
    input_size_encoder, encoder_embedding_size, hidden_size, num_layers, enc_dropout
).to(device)

decoder_net = Decoder(
    input_size_decoder,
    decoder_embedding_size,
    hidden_size,
    output_size,
    num_layers,
    dec_dropout,
).to(device)

model = Seq2Seq(encoder_net, decoder_net).to(device)
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

pad_idx = target_field.vocab.stoi["<pad>"]
criterion = nn.CrossEntropyLoss(ignore_index=pad_idx)

writer = SummaryWriter(f"runs/loss_plot")
step = 0

def translate_sentence(model, sentence, input_field, target_field, device, max_length=50):
    # print(sentence)

    # sys.exit()

    # Load german tokenizer


    # Create tokens using spacy and everything in lower case (which is what our vocab is)
    if type(sentence) == str:
        tokens = sentence.split(' ')
    else:
        tokens = [token for token in sentence]

    # print(tokens)

    # sys.exit()
    # Add <SOS> and <EOS> in beginning and end respectively
    tokens.insert(0, input_field.init_token)
    tokens.append(input_field.eos_token)

    # Go through each german token and convert to an index
    text_to_indices = [input_field.vocab.stoi[token] for token in tokens]

    # Convert to Tensor
    sentence_tensor = torch.LongTensor(text_to_indices).unsqueeze(1).to(device)

    # Build encoder hidden, cell state
    with torch.no_grad():
        hidden, cell = model.encoder(sentence_tensor)

    outputs = [target_field.vocab.stoi["<sos>"]]

    for _ in range(max_length):
        previous_word = torch.LongTensor([outputs[-1]]).to(device)

        with torch.no_grad():
            output, hidden, cell = model.decoder(previous_word, hidden, cell)
            best_guess = output.argmax(1).item()

        outputs.append(best_guess)

        # Model predicts it's the end of the sentence
        if output.argmax(1).item() == target_field.vocab.stoi["<eos>"]:
            break

    translated_sentence = [target_field.vocab.itos[idx] for idx in outputs]

    # remove start token
    return translated_sentence[1:]

def bleu(data, model, input_field, target_field, device):
    targets = []
    outputs = []

    for example in data:
        src = vars(example)["input"]
        trg = vars(example)["target"]

        prediction = translate_sentence(model, src,input_field, target_field, device)
        prediction = prediction[:-1]  # remove <eos> token

        targets.append([trg])
        outputs.append(prediction)

    return bleu_score(outputs, targets)


def save_checkpoint(state, filename="my_checkpoint.pth.tar"):
    print("=> Saving checkpoint")
    torch.save(state, filename)


def load_checkpoint(checkpoint, model, optimizer):
    print("=> Loading checkpoint")
    model.load_state_dict(checkpoint["state_dict"])
    optimizer.load_state_dict(checkpoint["optimizer"])

sentence = "আঁই ডুলল্গার হাগ দিই ভাত খাইয়ুম"

for epoch in range(num_epochs):
    print(f"[Epoch {epoch} / {num_epochs}]")
    #need
    #checkpoint = {"state_dict": model.state_dict(), "optimizer": optimizer.state_dict()}
    #save_checkpoint(checkpoint)

    model.eval()
	  #need
    translated_sentence = translate_sentence(
        model, sentence, input_field, target_field, device, max_length=50
    )

    print(f"Translated example sentence: \n {translated_sentence}")

    model.train()

    for batch_idx, batch in enumerate(train_iterator):
        # Get input and targets and get to cuda
        inp_data = batch.input.to(device)
        target = batch.target.to(device)

        # Forward prop
        output = model(inp_data, target)

        # Output is of shape (trg_len, batch_size, output_dim) but Cross Entropy Loss
        # doesn't take input in that form. For example if we have MNIST we want to have
        # output to be: (N, 10) and targets just (N). Here we can view it in a similar
        # way that we have output_words * batch_size that we want to send in into
        # our cost function, so we need to do some reshapin. While we're at it
        # Let's also remove the start token while we're at it
        output = output[1:].reshape(-1, output.shape[2])
        target = target[1:].reshape(-1)

        optimizer.zero_grad()
        loss = criterion(output, target)

        # Back prop
        loss.backward()

        # Clip to avoid exploding gradient issues, makes sure grads are
        # within a healthy range
        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1)

        # Gradient descent step
        optimizer.step()

        # Plot to tensorboard
        #need
        writer.add_scalar("Training loss", loss, global_step=step)
        step += 1

# running on entire test data takes a while
score = bleu(test_data[1:100], model, input_field, target_field, device)
print(f"Bleu score {score * 100:.2f}")